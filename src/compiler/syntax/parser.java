
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 09 10:05:23 CET 2024
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 09 10:05:23 CET 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\053\002\000\002\002" +
    "\004\000\002\004\002\000\002\003\003\000\002\005\012" +
    "\000\002\006\004\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\010\004\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\004\000\002\013" +
    "\003\000\002\013\004\000\002\014\006\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\004\000" +
    "\002\017\003\000\002\017\004\000\002\020\006\000\002" +
    "\021\007\000\002\022\004\000\002\023\003\000\002\023" +
    "\004\000\002\024\006\000\002\025\003\000\002\025\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\031\015\000\002\032\017\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\005" +
    "\000\002\035\005\000\002\036\003\000\002\036\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\004\000\002\042" +
    "\007\000\002\042\006\000\002\042\011\000\002\042\003" +
    "\000\002\042\004\000\002\043\003\000\002\043\003\000" +
    "\002\044\012\000\002\044\010\000\002\045\006\000\002" +
    "\045\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\046\003\000\002\047\003\000\002\047" +
    "\006\000\002\050\004\000\002\050\007\000\002\051\005" +
    "\000\002\051\006\000\002\052\003\000\002\052\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\030\000\001\002\000\004\002\271\001" +
    "\002\000\004\030\010\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffd\001\002\000\004\054\011\001\002\000" +
    "\004\011\012\001\002\000\016\024\ufffe\026\031\027\016" +
    "\036\026\040\032\041\023\001\002\000\004\024\ufff5\001" +
    "\002\000\010\024\uffde\026\031\027\016\001\002\000\004" +
    "\024\ufff6\001\002\000\004\054\256\001\002\000\004\024" +
    "\ufff8\001\002\000\004\024\ufff4\001\002\000\004\024\ufffa" +
    "\001\002\000\010\024\ufffe\026\031\027\016\001\002\000" +
    "\004\054\060\001\002\000\012\024\ufffe\026\031\027\016" +
    "\041\023\001\002\000\004\024\236\001\002\000\004\054" +
    "\223\001\002\000\010\024\uffdc\026\uffdc\027\uffdc\001\002" +
    "\000\014\024\ufffe\026\031\027\016\036\026\041\023\001" +
    "\002\000\004\054\046\001\002\000\004\054\035\001\002" +
    "\000\010\024\uffdb\026\uffdb\027\uffdb\001\002\000\014\024" +
    "\ufff3\026\ufff3\027\ufff3\036\ufff3\041\ufff3\001\002\000\004" +
    "\013\040\001\002\000\016\024\ufff2\026\ufff2\027\ufff2\036" +
    "\ufff2\041\ufff2\054\035\001\002\000\014\024\ufff1\026\ufff1" +
    "\027\ufff1\036\ufff1\041\ufff1\001\002\000\010\044\043\045" +
    "\044\052\041\001\002\000\004\011\uffef\001\002\000\004" +
    "\011\045\001\002\000\004\011\uffee\001\002\000\004\011" +
    "\uffed\001\002\000\016\024\ufff0\026\ufff0\027\ufff0\036\ufff0" +
    "\041\ufff0\054\ufff0\001\002\000\004\020\047\001\002\000" +
    "\004\054\052\001\002\000\004\012\214\001\002\000\004" +
    "\021\063\001\002\000\006\010\056\012\uffd3\001\002\000" +
    "\006\011\054\021\uffd6\001\002\000\004\054\052\001\002" +
    "\000\004\021\uffd5\001\002\000\004\054\060\001\002\000" +
    "\004\012\uffd2\001\002\000\006\010\061\012\uffe3\001\002" +
    "\000\004\054\060\001\002\000\004\012\uffe2\001\002\000" +
    "\004\012\064\001\002\000\006\042\067\043\065\001\002" +
    "\000\004\011\uffd8\001\002\000\004\011\070\001\002\000" +
    "\004\011\uffd7\001\002\000\016\024\ufffe\026\031\027\016" +
    "\036\026\040\032\041\023\001\002\000\004\024\072\001" +
    "\002\000\014\025\ufffe\031\077\034\073\051\102\054\104" +
    "\001\002\000\014\031\077\034\073\035\ufffe\051\102\054" +
    "\104\001\002\000\004\014\203\001\002\000\016\025\ufffe" +
    "\031\077\034\073\035\ufffe\051\102\054\104\001\002\000" +
    "\006\025\uffcd\035\uffcd\001\002\000\004\020\166\001\002" +
    "\000\004\011\165\001\002\000\004\025\163\001\002\000" +
    "\004\020\155\001\002\000\004\025\uffce\001\002\000\040" +
    "\004\uffc1\005\uffc1\006\uffc1\010\uffc1\011\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\107\021\uffc1\022\106\023\uffc1" +
    "\046\uffc1\050\uffc1\001\002\000\020\025\uffc8\031\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\051\uffc8\054\uffc8\001\002\000\016" +
    "\020\116\022\122\044\114\045\121\052\115\054\104\001" +
    "\002\000\020\020\116\021\112\022\122\044\114\045\121" +
    "\052\115\054\104\001\002\000\004\021\152\001\002\000" +
    "\032\004\uffb4\005\uffb4\006\uffb4\010\uffb4\011\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\021\uffb4\023\uffb4\046\uffb4\050\uffb4\001" +
    "\002\000\032\004\uffae\005\uffae\006\uffae\010\uffae\011\uffae" +
    "\015\uffae\016\uffae\017\uffae\021\uffae\023\uffae\046\uffae\050" +
    "\uffae\001\002\000\032\004\uffc0\005\uffc0\006\uffc0\010\uffc0" +
    "\011\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\023\uffc0\046" +
    "\uffc0\050\uffc0\001\002\000\032\004\uffbe\005\uffbe\006\uffbe" +
    "\010\uffbe\011\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\023" +
    "\uffbe\046\uffbe\050\uffbe\001\002\000\032\004\uffbf\005\uffbf" +
    "\006\uffbf\010\uffbf\011\uffbf\015\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\023\uffbf\046\uffbf\050\uffbf\001\002\000\016\020\116" +
    "\022\122\044\114\045\121\052\115\054\104\001\002\000" +
    "\032\004\uffb3\005\uffb3\006\uffb3\010\uffb3\011\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\023\uffb3\046\uffb3\050\uffb3\001" +
    "\002\000\024\004\126\005\131\006\132\010\146\016\133" +
    "\017\130\021\uffac\046\125\050\134\001\002\000\032\004" +
    "\uffbd\005\uffbd\006\uffbd\010\uffbd\011\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\021\uffbd\023\uffbd\046\uffbd\050\uffbd\001\002\000" +
    "\020\020\116\022\122\023\123\044\114\045\121\052\115" +
    "\054\104\001\002\000\032\004\uffb0\005\uffb0\006\uffb0\010" +
    "\uffb0\011\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\023\uffb0" +
    "\046\uffb0\050\uffb0\001\002\000\022\004\126\005\131\006" +
    "\132\015\127\016\133\017\130\046\125\050\134\001\002" +
    "\000\016\020\116\022\122\044\114\045\121\052\115\054" +
    "\104\001\002\000\016\020\116\022\122\044\114\045\121" +
    "\052\115\054\104\001\002\000\016\020\116\022\122\044" +
    "\114\045\121\052\115\054\104\001\002\000\016\020\116" +
    "\022\122\044\114\045\121\052\115\054\104\001\002\000" +
    "\016\020\116\022\122\044\114\045\121\052\115\054\104" +
    "\001\002\000\016\020\116\022\122\044\114\045\121\052" +
    "\115\054\104\001\002\000\016\020\116\022\122\044\114" +
    "\045\121\052\115\054\104\001\002\000\016\020\116\022" +
    "\122\044\114\045\121\052\115\054\104\001\002\000\032" +
    "\004\uffb5\005\uffb5\006\uffb5\010\uffb5\011\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\021\uffb5\023\uffb5\046\uffb5\050\uffb5\001\002" +
    "\000\026\004\126\005\131\006\132\010\uffb8\011\uffb8\015" +
    "\uffb8\021\uffb8\023\uffb8\046\125\050\134\001\002\000\032" +
    "\004\uffb9\005\uffb9\006\uffb9\010\uffb9\011\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\021\uffb9\023\uffb9\046\125\050\134\001\002" +
    "\000\032\004\uffba\005\uffba\006\132\010\uffba\011\uffba\015" +
    "\uffba\016\uffba\017\uffba\021\uffba\023\uffba\046\125\050\134" +
    "\001\002\000\026\004\126\005\131\006\132\010\uffb7\011" +
    "\uffb7\015\uffb7\021\uffb7\023\uffb7\046\125\050\134\001\002" +
    "\000\022\004\126\005\131\006\132\016\133\017\130\023" +
    "\143\046\125\050\134\001\002\000\032\004\uffaf\005\uffaf" +
    "\006\uffaf\010\uffaf\011\uffaf\015\uffaf\016\uffaf\017\uffaf\021" +
    "\uffaf\023\uffaf\046\uffaf\050\uffaf\001\002\000\032\004\uffbb" +
    "\005\uffbb\006\132\010\uffbb\011\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\021\uffbb\023\uffbb\046\125\050\134\001\002\000\030" +
    "\004\uffb6\005\uffb6\006\uffb6\010\uffb6\011\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\021\uffb6\023\uffb6\050\134\001\002\000\016" +
    "\020\116\022\122\044\114\045\121\052\115\054\104\001" +
    "\002\000\004\021\uffab\001\002\000\022\004\126\005\131" +
    "\006\132\016\133\017\130\021\151\046\125\050\134\001" +
    "\002\000\032\004\uffbc\005\uffbc\006\uffbc\010\uffbc\011\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\021\uffbc\023\uffbc\046\uffbc\050" +
    "\uffbc\001\002\000\032\004\uffad\005\uffad\006\uffad\010\uffad" +
    "\011\uffad\015\uffad\016\uffad\017\uffad\021\uffad\023\uffad\046" +
    "\uffad\050\uffad\001\002\000\022\004\126\005\131\006\132" +
    "\016\133\017\130\023\154\046\125\050\134\001\002\000" +
    "\034\004\uffc2\005\uffc2\006\uffc2\010\uffc2\011\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\046\uffc2\050" +
    "\uffc2\001\002\000\020\020\116\022\122\044\114\045\121" +
    "\052\115\053\156\054\104\001\002\000\004\021\uffc6\001" +
    "\002\000\004\021\161\001\002\000\022\004\126\005\131" +
    "\006\132\016\133\017\130\021\uffc5\046\125\050\134\001" +
    "\002\000\004\011\162\001\002\000\020\025\uffcb\031\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\051\uffcb\054\uffcb\001\002\000" +
    "\004\011\164\001\002\000\010\024\uffd9\026\uffd9\027\uffd9" +
    "\001\002\000\020\025\uffc7\031\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\051\uffc7\054\uffc7\001\002\000\016\020\116\022\122" +
    "\044\114\045\121\052\115\054\104\001\002\000\022\004" +
    "\126\005\131\006\132\016\133\017\130\021\170\046\125" +
    "\050\134\001\002\000\004\032\171\001\002\000\014\024" +
    "\174\031\077\034\073\051\102\054\104\001\002\000\020" +
    "\025\uffc3\031\uffc3\033\200\034\uffc3\035\uffc3\051\uffc3\054" +
    "\uffc3\001\002\000\020\025\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\051\uffb2\054\uffb2\001\002\000\014\025\ufffe\031" +
    "\077\034\073\051\102\054\104\001\002\000\004\025\176" +
    "\001\002\000\004\011\177\001\002\000\020\025\uffb1\031" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\051\uffb1\054\uffb1\001\002" +
    "\000\014\024\174\031\077\034\073\051\102\054\104\001" +
    "\002\000\020\025\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\051\uffc4\054\uffc4\001\002\000\006\025\uffcc\035\uffcc\001" +
    "\002\000\016\020\116\022\122\044\114\045\121\052\115" +
    "\054\104\001\002\000\022\004\126\005\131\006\132\011" +
    "\205\016\133\017\130\046\125\050\134\001\002\000\020" +
    "\025\uffca\031\uffca\033\uffca\034\uffca\035\uffca\051\uffca\054" +
    "\uffca\001\002\000\004\035\207\001\002\000\004\020\210" +
    "\001\002\000\016\020\116\022\122\044\114\045\121\052" +
    "\115\054\104\001\002\000\022\004\126\005\131\006\132" +
    "\016\133\017\130\021\212\046\125\050\134\001\002\000" +
    "\004\011\213\001\002\000\020\025\uffc9\031\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\051\uffc9\054\uffc9\001\002\000\010\042" +
    "\220\043\216\054\217\001\002\000\006\011\uffd4\021\uffd4" +
    "\001\002\000\006\011\uffd0\021\uffd0\001\002\000\006\011" +
    "\uffd1\021\uffd1\001\002\000\006\011\uffcf\021\uffcf\001\002" +
    "\000\004\024\ufffb\001\002\000\012\024\uffec\026\uffec\027" +
    "\uffec\041\uffec\001\002\000\004\013\226\001\002\000\014" +
    "\024\uffeb\026\uffeb\027\uffeb\041\uffeb\054\223\001\002\000" +
    "\012\024\uffea\026\uffea\027\uffea\041\uffea\001\002\000\004" +
    "\037\230\001\002\000\004\011\235\001\002\000\004\047" +
    "\231\001\002\000\004\052\232\001\002\000\004\015\233" +
    "\001\002\000\004\052\234\001\002\000\004\011\uffe8\001" +
    "\002\000\014\024\uffe9\026\uffe9\027\uffe9\041\uffe9\054\uffe9" +
    "\001\002\000\014\025\ufffe\031\077\034\073\051\102\054" +
    "\104\001\002\000\004\025\240\001\002\000\004\007\241" +
    "\001\002\000\004\002\ufffc\001\002\000\004\024\ufff9\001" +
    "\002\000\012\024\uffe6\026\uffe6\027\uffe6\054\060\001\002" +
    "\000\004\012\246\001\002\000\010\024\uffe7\026\uffe7\027" +
    "\uffe7\001\002\000\010\042\251\043\247\054\250\001\002" +
    "\000\004\011\uffe0\001\002\000\004\011\uffe1\001\002\000" +
    "\004\011\uffdf\001\002\000\004\011\253\001\002\000\012" +
    "\024\uffe4\026\uffe4\027\uffe4\054\uffe4\001\002\000\010\024" +
    "\uffe5\026\uffe5\027\uffe5\001\002\000\004\024\ufff7\001\002" +
    "\000\004\020\257\001\002\000\004\054\052\001\002\000" +
    "\004\021\261\001\002\000\004\011\262\001\002\000\016" +
    "\024\ufffe\026\031\027\016\036\026\040\032\041\023\001" +
    "\002\000\004\024\264\001\002\000\014\025\ufffe\031\077" +
    "\034\073\051\102\054\104\001\002\000\004\025\266\001" +
    "\002\000\004\011\267\001\002\000\010\024\uffda\026\uffda" +
    "\027\uffda\001\002\000\004\024\uffdd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\003\053\004\001\001\000\002\001" +
    "\001\000\006\003\005\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\017\006\024\007\020\010\016\011\014\012\027" +
    "\016\023\022\021\027\012\030\013\031\026\032\032\001" +
    "\001\000\002\001\001\000\012\027\267\030\013\031\026" +
    "\032\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\017\011\254\027\012\030\013\031\026\032\032\001" +
    "\001\000\010\023\244\024\242\025\243\001\001\000\022" +
    "\004\017\010\241\011\014\022\021\027\012\030\013\031" +
    "\026\032\032\001\001\000\002\001\001\000\006\017\221" +
    "\020\223\001\001\000\002\001\001\000\026\004\017\007" +
    "\220\010\016\011\014\016\023\022\021\027\012\030\013" +
    "\031\026\032\032\001\001\000\002\001\001\000\006\013" +
    "\033\014\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\036\014\035\001\001\000" +
    "\002\001\001\000\004\015\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\050\035\052" +
    "\036\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\054\035\052" +
    "\036\047\001\001\000\002\001\001\000\004\025\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\017\006\070\007\020\010\016\011" +
    "\014\012\027\016\023\022\021\027\012\030\013\031\026" +
    "\032\032\001\001\000\002\001\001\000\020\004\075\040" +
    "\100\041\102\042\074\044\104\045\073\051\077\001\001" +
    "\000\016\004\075\041\205\042\074\044\104\045\073\051" +
    "\077\001\001\000\002\001\001\000\016\004\075\041\201" +
    "\042\074\044\104\045\073\051\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\045\112\046\152\050\110\051\116" +
    "\001\001\000\014\045\112\046\117\050\110\051\116\052" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\045\112\046\147\050\110\051\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\112\046\123\050\110\051\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\112\046\144\050" +
    "\110\051\116\001\001\000\012\045\112\046\143\050\110" +
    "\051\116\001\001\000\012\045\112\046\141\050\110\051" +
    "\116\001\001\000\012\045\112\046\140\050\110\051\116" +
    "\001\001\000\012\045\112\046\137\050\110\051\116\001" +
    "\001\000\012\045\112\046\136\050\110\051\116\001\001" +
    "\000\012\045\112\046\135\050\110\051\116\001\001\000" +
    "\012\045\112\046\134\050\110\051\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\112\046" +
    "\117\050\110\051\116\052\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\043\156\045\112" +
    "\046\157\050\110\051\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\045\112\046\166\050\110\051\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\172\044" +
    "\104\045\073\047\171\051\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\075\041\174\042\074\044" +
    "\104\045\073\051\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\172\044\104\045" +
    "\073\047\200\051\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\045\112\046\203\050\110\051\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\112\046\210\050\110\051" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\224\020\223\001\001\000\002\001\001\000\004\021\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\075\040\236\041\102\042" +
    "\074\044\104\045\073\051\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\253\024\242\025\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\257\035\052\036\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\017\006" +
    "\262\007\020\010\016\011\014\012\027\016\023\022\021" +
    "\027\012\030\013\031\026\032\032\001\001\000\002\001" +
    "\001\000\020\004\075\040\264\041\102\042\074\044\104" +
    "\045\073\051\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 	    		    
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosLlamadaFuncion ::= expresion COMA parametrosLlamadaFuncion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("parametrosLlamadaFuncion ::= expresion COMA parametrosLlamadaFuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamadaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosLlamadaFuncion ::= expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("parametrosLlamadaFuncion ::= expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamadaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 syntaxErrorManager.syntaxInfo("llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 syntaxErrorManager.syntaxInfo("llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS CIERRA_PARENTESIS - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // vector ::= ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("vector ::= ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // vector ::= ABRE_VECTOR CIERRA_VECTOR 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("vector ::= ABRE_VECTOR CIERRA_VECTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaOBloque ::= BEGIN sentencias END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentenciaOBloque ::= BEGIN sentencias END PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaOBloque",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaOBloque ::= sentencia 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentenciaOBloque ::= sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaOBloque",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= llamadaFuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= vector 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= vector"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion OR expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion IN expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion IN expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion DISTINTO expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion MAYOR expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion POR expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion MENOS expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= expresion MAS expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= ABRE_PARENTESIS expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= ABRE_PARENTESIS expresion CIERRA_PARENTESIS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= FALSE 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= FALSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= TRUE 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= TRUE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("expresion ::= NUMERO - " + n.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= referencia 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("expresion ::= referencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // referencia ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("referencia ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // referencia ::= IDENTIFICADOR ABRE_VECTOR expresion CIERRA_VECTOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 syntaxErrorManager.syntaxInfo("referencia ::= IDENTIFICADOR ABRE_VECTOR expresion CIERRA_VECTOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametroWrite ::= expresion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("parametroWrite ::= expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroWrite",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametroWrite ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("parametroWrite ::= CADENA - " + c.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroWrite",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= llamadaFuncion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencia ::= llamadaFuncion PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencia ::= sentenciaIf"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencia ::= REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= referencia ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencia ::= referencia ASIGNACION expresion PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencias ::= sentencia sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= nada 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("sentencias ::= nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpoPrograma ::= sentencias 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cuerpoPrograma ::= sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoParametro ::= BOOLEAN 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("tipoParametro ::= BOOLEAN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoParametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoParametro ::= INTEGER 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("tipoParametro ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoParametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoParametro ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("tipoParametro ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoParametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idsParametros ::= IDENTIFICADOR COMA idsVariables 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 syntaxErrorManager.syntaxInfo("idsParametros ::= IDENTIFICADOR COMA idsVariables - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsParametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // idsParametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("idsParametros ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsParametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosConTipo",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametrosConTipo PUNTO_Y_COMA parametros 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("parametros ::= parametrosConTipo PUNTO_Y_COMA parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= parametrosConTipo 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("parametros ::= parametrosConTipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoFuncion ::= BOOLEAN 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("tipoFuncion ::= BOOLEAN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoFuncion ::= INTEGER 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("tipoFuncion ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionFuncion ::= FUNCTION IDENTIFICADOR ABRE_PARENTESIS parametros CIERRA_PARENTESIS DOS_PUNTOS tipoFuncion PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		 syntaxErrorManager.syntaxInfo("declaracionFuncion ::= ... - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionProcedimiento ::= PROCEDURE IDENTIFICADOR ABRE_PARENTESIS parametros CIERRA_PARENTESIS PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		 syntaxErrorManager.syntaxInfo("declaracionProcedimiento ::= ... - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionProcedimiento",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionSubprograma ::= declaracionFuncion 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionSubprograma ::= declaracionFuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionSubprograma ::= declaracionProcedimiento 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionSubprograma ::= declaracionProcedimiento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionSubprogramas ::= declaracionSubprograma 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionSubprogramas ::= declaracionSubprograma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoVariable ::= BOOLEAN 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("tipoVariable ::= BOOLEAN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoVariable ::= INTEGER 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("tipoVariable ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoVariable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("tipoVariable ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // idsVariables ::= IDENTIFICADOR COMA idsVariables 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 syntaxErrorManager.syntaxInfo("idsVariables ::= IDENTIFICADOR COMA idsVariables - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsVariables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // idsVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("idsVariables ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsVariables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionVariables ::= declaracionVariable declaracionVariables 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionVariables ::= declaracionVariable declaracionVariables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionVariables ::= declaracionVariable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionDeclaracionVariables ::= VAR declaracionVariables 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("seccionDeclaracionVariables ::= VAR declaracionVariables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionDeclaracionVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valorTipo ::= SET OF NUMERO RANGO NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("valorTipo ::= SET OF NUMERO RANGO NUMERO - " + n1.getLexema() + " - " + n2.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 syntaxErrorManager.syntaxInfo("declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionTipos ::= declaracionTipo declaracionTipos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionTipos ::= declaracionTipo 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionTipos ::= declaracionTipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seccionDeclaracionTipos ::= TYPE declaracionTipos 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("seccionDeclaracionTipos ::= TYPE declaracionTipos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionDeclaracionTipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valorConstante ::= FALSE 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("valorConstante ::= FALSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valorConstante ::= TRUE 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("valorConstante ::= TRUE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorConstante ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 syntaxErrorManager.syntaxInfo("valorConstante ::= NUMERO - " + n.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 syntaxErrorManager.syntaxInfo("declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionConstantes ::= declaracionConstante declaracionConstantes"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionConstantes ::= declaracionConstante 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("declaracionConstantes ::= declaracionConstante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionDeclaracionConstantes ::= CONST declaracionConstantes 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("seccionDeclaracionConstantes ::= CONST declaracionConstantes"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionDeclaracionConstantes",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabeceraPrograma_3 ::= nada 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma_3 ::= nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabeceraPrograma_3 ::= declaracionSubprogramas 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma_3 ::= declaracionSubprogramas"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cabeceraPrograma_2 ::= cabeceraPrograma_3 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma_2 ::= cabeceraPrograma_3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabeceraPrograma_2 ::= seccionDeclaracionVariables cabeceraPrograma_3 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma_2 ::= seccionDeclaracionVariables cabeceraPrograma_3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cabeceraPrograma_1 ::= cabeceraPrograma_2 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma_1 ::= cabeceraPrograma_2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cabeceraPrograma ::= cabeceraPrograma_1 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma ::= cabeceraPrograma_1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxInfo("cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= PROGRAM IDENTIFICADOR PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 syntaxErrorManager.syntaxInfo("programa ::= ... - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= programa 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nada",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

