
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 07 23:23:52 CET 2024
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 07 23:23:52 CET 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\053\002\000\002\002" +
    "\004\000\002\004\002\000\002\003\003\000\002\005\012" +
    "\000\002\006\004\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\010\004\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\004\000\002\013" +
    "\003\000\002\013\004\000\002\014\006\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\004\000" +
    "\002\017\003\000\002\017\004\000\002\020\006\000\002" +
    "\021\007\000\002\022\004\000\002\023\003\000\002\023" +
    "\004\000\002\024\006\000\002\025\003\000\002\025\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\031\015\000\002\032\017\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\005" +
    "\000\002\035\005\000\002\036\003\000\002\036\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\004\000\002\042" +
    "\007\000\002\042\006\000\002\042\011\000\002\042\003" +
    "\000\002\042\004\000\002\043\003\000\002\043\003\000" +
    "\002\044\012\000\002\044\010\000\002\045\006\000\002" +
    "\045\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\003\000\002\046\003\000\002\047" +
    "\003\000\002\047\006\000\002\050\004\000\002\050\007" +
    "\000\002\051\005\000\002\051\006\000\002\052\003\000" +
    "\002\052\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\031\000\001\002\000\004\002\273\001" +
    "\002\000\004\031\010\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffd\001\002\000\004\055\011\001\002\000" +
    "\004\012\012\001\002\000\016\025\ufffe\027\031\030\016" +
    "\037\026\041\032\042\023\001\002\000\004\025\ufff5\001" +
    "\002\000\010\025\uffde\027\031\030\016\001\002\000\004" +
    "\025\ufff6\001\002\000\004\055\260\001\002\000\004\025" +
    "\ufff8\001\002\000\004\025\ufff4\001\002\000\004\025\ufffa" +
    "\001\002\000\010\025\ufffe\027\031\030\016\001\002\000" +
    "\004\055\060\001\002\000\012\025\ufffe\027\031\030\016" +
    "\042\023\001\002\000\004\025\240\001\002\000\004\055" +
    "\225\001\002\000\010\025\uffdc\027\uffdc\030\uffdc\001\002" +
    "\000\014\025\ufffe\027\031\030\016\037\026\042\023\001" +
    "\002\000\004\055\046\001\002\000\004\055\035\001\002" +
    "\000\010\025\uffdb\027\uffdb\030\uffdb\001\002\000\014\025" +
    "\ufff3\027\ufff3\030\ufff3\037\ufff3\042\ufff3\001\002\000\004" +
    "\014\040\001\002\000\016\025\ufff2\027\ufff2\030\ufff2\037" +
    "\ufff2\042\ufff2\055\035\001\002\000\014\025\ufff1\027\ufff1" +
    "\030\ufff1\037\ufff1\042\ufff1\001\002\000\010\045\043\046" +
    "\044\053\041\001\002\000\004\012\uffef\001\002\000\004" +
    "\012\045\001\002\000\004\012\uffee\001\002\000\004\012" +
    "\uffed\001\002\000\016\025\ufff0\027\ufff0\030\ufff0\037\ufff0" +
    "\042\ufff0\055\ufff0\001\002\000\004\021\047\001\002\000" +
    "\004\055\052\001\002\000\004\013\216\001\002\000\004" +
    "\022\063\001\002\000\006\011\056\013\uffd3\001\002\000" +
    "\006\012\054\022\uffd6\001\002\000\004\055\052\001\002" +
    "\000\004\022\uffd5\001\002\000\004\055\060\001\002\000" +
    "\004\013\uffd2\001\002\000\006\011\061\013\uffe3\001\002" +
    "\000\004\055\060\001\002\000\004\013\uffe2\001\002\000" +
    "\004\013\064\001\002\000\006\043\067\044\065\001\002" +
    "\000\004\012\uffd8\001\002\000\004\012\070\001\002\000" +
    "\004\012\uffd7\001\002\000\016\025\ufffe\027\031\030\016" +
    "\037\026\041\032\042\023\001\002\000\004\025\072\001" +
    "\002\000\014\026\ufffe\032\077\035\073\052\102\055\104" +
    "\001\002\000\014\032\077\035\073\036\ufffe\052\102\055" +
    "\104\001\002\000\004\015\205\001\002\000\016\026\ufffe" +
    "\032\077\035\073\036\ufffe\052\102\055\104\001\002\000" +
    "\006\026\uffcd\036\uffcd\001\002\000\004\021\170\001\002" +
    "\000\004\012\167\001\002\000\004\026\165\001\002\000" +
    "\004\021\157\001\002\000\004\026\uffce\001\002\000\042" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\107\022\uffc1\023\106" +
    "\024\uffc1\047\uffc1\051\uffc1\001\002\000\020\026\uffc8\032" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\052\uffc8\055\uffc8\001\002" +
    "\000\016\021\117\023\122\045\114\046\121\053\115\055" +
    "\104\001\002\000\020\021\117\022\111\023\122\045\114" +
    "\046\121\053\115\055\104\001\002\000\004\022\154\001" +
    "\002\000\034\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\012\uffad\016\uffad\017\uffad\020\uffad\022\uffad\024\uffad\047" +
    "\uffad\051\uffad\001\002\000\034\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\011\uffb3\012\uffb3\016\uffb3\017\uffb3\020\uffb3\022" +
    "\uffb3\024\uffb3\047\uffb3\051\uffb3\001\002\000\034\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\022\uffc0\024\uffc0\047\uffc0\051\uffc0\001\002" +
    "\000\034\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe\024\uffbe\047\uffbe" +
    "\051\uffbe\001\002\000\034\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\016\uffbf\017\uffbf\020\uffbf\022\uffbf" +
    "\024\uffbf\047\uffbf\051\uffbf\001\002\000\034\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\022\uffb2\024\uffb2\047\uffb2\051\uffb2\001\002\000" +
    "\016\021\117\023\122\045\114\046\121\053\115\055\104" +
    "\001\002\000\026\004\131\005\125\006\127\007\130\011" +
    "\150\017\132\020\134\022\uffab\047\126\051\135\001\002" +
    "\000\034\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\012" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\024\uffbd\047\uffbd" +
    "\051\uffbd\001\002\000\020\021\117\023\122\024\123\045" +
    "\114\046\121\053\115\055\104\001\002\000\034\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\022\uffaf\024\uffaf\047\uffaf\051\uffaf\001\002" +
    "\000\024\004\131\005\125\006\127\007\130\016\133\017" +
    "\132\020\134\047\126\051\135\001\002\000\016\021\117" +
    "\023\122\045\114\046\121\053\115\055\104\001\002\000" +
    "\016\021\117\023\122\045\114\046\121\053\115\055\104" +
    "\001\002\000\016\021\117\023\122\045\114\046\121\053" +
    "\115\055\104\001\002\000\016\021\117\023\122\045\114" +
    "\046\121\053\115\055\104\001\002\000\016\021\117\023" +
    "\122\045\114\046\121\053\115\055\104\001\002\000\016" +
    "\021\117\023\122\045\114\046\121\053\115\055\104\001" +
    "\002\000\016\021\117\023\122\045\114\046\121\053\115" +
    "\055\104\001\002\000\016\021\117\023\122\045\114\046" +
    "\121\053\115\055\104\001\002\000\016\021\117\023\122" +
    "\045\114\046\121\053\115\055\104\001\002\000\034\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\022\uffb4\024\uffb4\047\uffb4\051\uffb4\001" +
    "\002\000\030\004\131\005\125\006\127\007\130\011\uffb6" +
    "\012\uffb6\016\uffb6\022\uffb6\024\uffb6\047\126\051\135\001" +
    "\002\000\024\004\131\005\125\006\127\007\130\017\132" +
    "\020\134\024\141\047\126\051\135\001\002\000\034\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\011\uffae\012\uffae\016\uffae" +
    "\017\uffae\020\uffae\022\uffae\024\uffae\047\uffae\051\uffae\001" +
    "\002\000\030\004\131\005\125\006\127\007\130\011\uffb7" +
    "\012\uffb7\016\uffb7\022\uffb7\024\uffb7\047\126\051\135\001" +
    "\002\000\034\004\uffbb\005\uffbb\006\127\007\130\011\uffbb" +
    "\012\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\024\uffbb\047" +
    "\126\051\135\001\002\000\034\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\011\uffb8\012\uffb8\016\uffb8\017\uffb8\020\uffb8\022" +
    "\uffb8\024\uffb8\047\126\051\135\001\002\000\034\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\022\uffb9\024\uffb9\047\126\051\135\001\002" +
    "\000\032\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\024\uffb5\051\135" +
    "\001\002\000\034\004\uffba\005\uffba\006\127\007\130\011" +
    "\uffba\012\uffba\016\uffba\017\uffba\020\uffba\022\uffba\024\uffba" +
    "\047\126\051\135\001\002\000\016\021\117\023\122\045" +
    "\114\046\121\053\115\055\104\001\002\000\004\022\uffaa" +
    "\001\002\000\024\004\131\005\125\006\127\007\130\017" +
    "\132\020\134\022\153\047\126\051\135\001\002\000\034" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\022\uffbc\024\uffbc\047\uffbc\051\uffbc" +
    "\001\002\000\034\004\uffac\005\uffac\006\uffac\007\uffac\011" +
    "\uffac\012\uffac\016\uffac\017\uffac\020\uffac\022\uffac\024\uffac" +
    "\047\uffac\051\uffac\001\002\000\024\004\131\005\125\006" +
    "\127\007\130\017\132\020\134\024\156\047\126\051\135" +
    "\001\002\000\036\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011" +
    "\uffc2\012\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2" +
    "\024\uffc2\047\uffc2\051\uffc2\001\002\000\020\021\117\023" +
    "\122\045\114\046\121\053\115\054\160\055\104\001\002" +
    "\000\004\022\uffc6\001\002\000\004\022\163\001\002\000" +
    "\024\004\131\005\125\006\127\007\130\017\132\020\134" +
    "\022\uffc5\047\126\051\135\001\002\000\004\012\164\001" +
    "\002\000\020\026\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\052\uffcb\055\uffcb\001\002\000\004\012\166\001\002\000" +
    "\010\025\uffd9\027\uffd9\030\uffd9\001\002\000\020\026\uffc7" +
    "\032\uffc7\034\uffc7\035\uffc7\036\uffc7\052\uffc7\055\uffc7\001" +
    "\002\000\016\021\117\023\122\045\114\046\121\053\115" +
    "\055\104\001\002\000\024\004\131\005\125\006\127\007" +
    "\130\017\132\020\134\022\172\047\126\051\135\001\002" +
    "\000\004\033\173\001\002\000\014\025\176\032\077\035" +
    "\073\052\102\055\104\001\002\000\020\026\uffc3\032\uffc3" +
    "\034\202\035\uffc3\036\uffc3\052\uffc3\055\uffc3\001\002\000" +
    "\020\026\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\052\uffb1" +
    "\055\uffb1\001\002\000\014\026\ufffe\032\077\035\073\052" +
    "\102\055\104\001\002\000\004\026\200\001\002\000\004" +
    "\012\201\001\002\000\020\026\uffb0\032\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\052\uffb0\055\uffb0\001\002\000\014\025\176" +
    "\032\077\035\073\052\102\055\104\001\002\000\020\026" +
    "\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\052\uffc4\055\uffc4" +
    "\001\002\000\006\026\uffcc\036\uffcc\001\002\000\016\021" +
    "\117\023\122\045\114\046\121\053\115\055\104\001\002" +
    "\000\024\004\131\005\125\006\127\007\130\012\207\017" +
    "\132\020\134\047\126\051\135\001\002\000\020\026\uffca" +
    "\032\uffca\034\uffca\035\uffca\036\uffca\052\uffca\055\uffca\001" +
    "\002\000\004\036\211\001\002\000\004\021\212\001\002" +
    "\000\016\021\117\023\122\045\114\046\121\053\115\055" +
    "\104\001\002\000\024\004\131\005\125\006\127\007\130" +
    "\017\132\020\134\022\214\047\126\051\135\001\002\000" +
    "\004\012\215\001\002\000\020\026\uffc9\032\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\052\uffc9\055\uffc9\001\002\000\010\043" +
    "\222\044\220\055\221\001\002\000\006\012\uffd4\022\uffd4" +
    "\001\002\000\006\012\uffd0\022\uffd0\001\002\000\006\012" +
    "\uffd1\022\uffd1\001\002\000\006\012\uffcf\022\uffcf\001\002" +
    "\000\004\025\ufffb\001\002\000\012\025\uffec\027\uffec\030" +
    "\uffec\042\uffec\001\002\000\004\014\230\001\002\000\014" +
    "\025\uffeb\027\uffeb\030\uffeb\042\uffeb\055\225\001\002\000" +
    "\012\025\uffea\027\uffea\030\uffea\042\uffea\001\002\000\004" +
    "\040\232\001\002\000\004\012\237\001\002\000\004\050" +
    "\233\001\002\000\004\053\234\001\002\000\004\016\235" +
    "\001\002\000\004\053\236\001\002\000\004\012\uffe8\001" +
    "\002\000\014\025\uffe9\027\uffe9\030\uffe9\042\uffe9\055\uffe9" +
    "\001\002\000\014\026\ufffe\032\077\035\073\052\102\055" +
    "\104\001\002\000\004\026\242\001\002\000\004\010\243" +
    "\001\002\000\004\002\ufffc\001\002\000\004\025\ufff9\001" +
    "\002\000\012\025\uffe6\027\uffe6\030\uffe6\055\060\001\002" +
    "\000\004\013\250\001\002\000\010\025\uffe7\027\uffe7\030" +
    "\uffe7\001\002\000\010\043\253\044\251\055\252\001\002" +
    "\000\004\012\uffe0\001\002\000\004\012\uffe1\001\002\000" +
    "\004\012\uffdf\001\002\000\004\012\255\001\002\000\012" +
    "\025\uffe4\027\uffe4\030\uffe4\055\uffe4\001\002\000\010\025" +
    "\uffe5\027\uffe5\030\uffe5\001\002\000\004\025\ufff7\001\002" +
    "\000\004\021\261\001\002\000\004\055\052\001\002\000" +
    "\004\022\263\001\002\000\004\012\264\001\002\000\016" +
    "\025\ufffe\027\031\030\016\037\026\041\032\042\023\001" +
    "\002\000\004\025\266\001\002\000\014\026\ufffe\032\077" +
    "\035\073\052\102\055\104\001\002\000\004\026\270\001" +
    "\002\000\004\012\271\001\002\000\010\025\uffda\027\uffda" +
    "\030\uffda\001\002\000\004\025\uffdd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\006\002\003\053\004\001\001\000\002\001" +
    "\001\000\006\003\005\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\017\006\024\007\020\010\016\011\014\012\027" +
    "\016\023\022\021\027\012\030\013\031\026\032\032\001" +
    "\001\000\002\001\001\000\012\027\271\030\013\031\026" +
    "\032\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\017\011\256\027\012\030\013\031\026\032\032\001" +
    "\001\000\010\023\246\024\244\025\245\001\001\000\022" +
    "\004\017\010\243\011\014\022\021\027\012\030\013\031" +
    "\026\032\032\001\001\000\002\001\001\000\006\017\223" +
    "\020\225\001\001\000\002\001\001\000\026\004\017\007" +
    "\222\010\016\011\014\016\023\022\021\027\012\030\013" +
    "\031\026\032\032\001\001\000\002\001\001\000\006\013" +
    "\033\014\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\036\014\035\001\001\000" +
    "\002\001\001\000\004\015\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\050\035\052" +
    "\036\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\054\035\052" +
    "\036\047\001\001\000\002\001\001\000\004\025\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\017\006\070\007\020\010\016\011" +
    "\014\012\027\016\023\022\021\027\012\030\013\031\026" +
    "\032\032\001\001\000\002\001\001\000\020\004\075\040" +
    "\100\041\102\042\074\044\104\045\073\051\077\001\001" +
    "\000\016\004\075\041\207\042\074\044\104\045\073\051" +
    "\077\001\001\000\002\001\001\000\016\004\075\041\203" +
    "\042\074\044\104\045\073\051\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\045\112\046\154\050\111\051\115" +
    "\001\001\000\014\045\112\046\117\050\111\051\115\052" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\112\046\151\050\111" +
    "\051\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\112\046\123\050\111\051\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\112\046\146\050" +
    "\111\051\115\001\001\000\012\045\112\046\145\050\111" +
    "\051\115\001\001\000\012\045\112\046\144\050\111\051" +
    "\115\001\001\000\012\045\112\046\143\050\111\051\115" +
    "\001\001\000\012\045\112\046\142\050\111\051\115\001" +
    "\001\000\012\045\112\046\141\050\111\051\115\001\001" +
    "\000\012\045\112\046\137\050\111\051\115\001\001\000" +
    "\012\045\112\046\136\050\111\051\115\001\001\000\012" +
    "\045\112\046\135\050\111\051\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\045\112\046\117\050\111\051\115\052\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\160\045\112\046\161\050\111\051\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\112\046\170\050\111\051" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\174\044\104\045\073\047\173\051\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\075\041\176" +
    "\042\074\044\104\045\073\051\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\174" +
    "\044\104\045\073\047\202\051\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\112\046\205\050\111" +
    "\051\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\045\112\046\212" +
    "\050\111\051\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\226\020\225\001\001\000\002\001\001\000" +
    "\004\021\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\075\040\240" +
    "\041\102\042\074\044\104\045\073\051\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\255\024\244\025\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\261\035\052\036" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\017\006\264\007\020\010\016\011\014\012\027\016" +
    "\023\022\021\027\012\030\013\031\026\032\032\001\001" +
    "\000\002\001\001\000\020\004\075\040\266\041\102\042" +
    "\074\044\104\045\073\051\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	private String getTypeName(Class clase) {
		if (clase.isArray()) {
			return getTypeName(clase.getComponentType()) + "[]";
		}
		return clase.getName();
	}
	
	private String getFieldNames(Class clase) {
		if (clase.isArray()) {
			return "[" + getFieldNames(clase.getComponentType()) + "]";
		}
		return Arrays.stream(clase.getDeclaredFields()).map(f -> f.getName()).toList().toString();
	}
	
	public void syntax_error(Symbol symbol)
	{ 	    	
		/*
		System.out.println("Empty array: " + getFieldNames((new Integer[]{11,12,13,14}).getClass()) + " - " + getTypeName((new Integer[]{21,22,23,24}).getClass()));
	
	    Arrays.stream(this.action_obj.getClass().getDeclaredFields()).forEach(field -> {
	    	try {
	    		System.out.println(field.getName() + ": " + field.get(this.action_obj) + " - " + getTypeName(field.get(this.action_obj).getClass()));
    		} catch(Exception ex) {
    			System.out.println(field.getName() + ": Error - " + ex);
    		}
	    });
	    */
	    
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametrosLlamadaFuncion ::= expresion COMA parametrosLlamadaFuncion 
            {
              Object RESULT =null;
		 System.out.println("parametrosLlamadaFuncion ::= expresion COMA parametrosLlamadaFuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamadaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosLlamadaFuncion ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("parametrosLlamadaFuncion ::= expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamadaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS CIERRA_PARENTESIS - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vector ::= ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR 
            {
              Object RESULT =null;
		 System.out.println("vector ::= ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // vector ::= ABRE_VECTOR CIERRA_VECTOR 
            {
              Object RESULT =null;
		 System.out.println("vector ::= ABRE_VECTOR CIERRA_VECTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaOBloque ::= BEGIN sentencias END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 System.out.println("sentenciaOBloque ::= BEGIN sentencias END PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaOBloque",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaOBloque ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("sentenciaOBloque ::= sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaOBloque",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= llamadaFuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= vector 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= vector"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion OR expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion IN expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion IN expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion DISTINTO expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion MAYOR expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion ENTRE expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion ENTRE expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion POR expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion MENOS expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= expresion MAS expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= ABRE_PARENTESIS expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= ABRE_PARENTESIS expresion CIERRA_PARENTESIS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= FALSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= TRUE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("expresion ::= NUMERO - " + n.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= referencia 
            {
              Object RESULT =null;
		 System.out.println("expresion ::= referencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // referencia ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("referencia ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // referencia ::= IDENTIFICADOR ABRE_VECTOR expresion CIERRA_VECTOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("referencia ::= IDENTIFICADOR ABRE_VECTOR expresion CIERRA_VECTOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque 
            {
              Object RESULT =null;
		 System.out.println("sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque 
            {
              Object RESULT =null;
		 System.out.println("sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametroWrite ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("parametroWrite ::= expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroWrite",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametroWrite ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("parametroWrite ::= CADENA - " + c.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroWrite",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= llamadaFuncion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 System.out.println("sentencia ::= llamadaFuncion PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		 System.out.println("sentencia ::= sentenciaIf"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 System.out.println("sentencia ::= REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= referencia ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 System.out.println("sentencia ::= referencia ASIGNACION expresion PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 System.out.println("sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		 System.out.println("sentencias ::= sentencia sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= nada 
            {
              Object RESULT =null;
		 System.out.println("sentencias ::= nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpoPrograma ::= sentencias 
            {
              Object RESULT =null;
		 System.out.println("cuerpoPrograma ::= sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoParametro ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("tipoParametro ::= BOOLEAN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoParametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoParametro ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("tipoParametro ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoParametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoParametro ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipoParametro ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoParametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idsParametros ::= IDENTIFICADOR COMA idsVariables 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("idsParametros ::= IDENTIFICADOR COMA idsVariables - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsParametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // idsParametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("idsParametros ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsParametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro 
            {
              Object RESULT =null;
		 System.out.println("parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosConTipo",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametrosConTipo PUNTO_Y_COMA parametros 
            {
              Object RESULT =null;
		 System.out.println("parametros ::= parametrosConTipo PUNTO_Y_COMA parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= parametrosConTipo 
            {
              Object RESULT =null;
		 System.out.println("parametros ::= parametrosConTipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoFuncion ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("tipoFuncion ::= BOOLEAN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoFuncion ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("tipoFuncion ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionFuncion ::= FUNCTION IDENTIFICADOR ABRE_PARENTESIS parametros CIERRA_PARENTESIS DOS_PUNTOS tipoFuncion PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		 System.out.println("declaracionFuncion ::= ... - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionProcedimiento ::= PROCEDURE IDENTIFICADOR ABRE_PARENTESIS parametros CIERRA_PARENTESIS PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		 System.out.println("declaracionProcedimiento ::= ... - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionProcedimiento",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionSubprograma ::= declaracionFuncion 
            {
              Object RESULT =null;
		 System.out.println("declaracionSubprograma ::= declaracionFuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionSubprograma ::= declaracionProcedimiento 
            {
              Object RESULT =null;
		 System.out.println("declaracionSubprograma ::= declaracionProcedimiento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas 
            {
              Object RESULT =null;
		 System.out.println("declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionSubprogramas ::= declaracionSubprograma 
            {
              Object RESULT =null;
		 System.out.println("declaracionSubprogramas ::= declaracionSubprograma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoVariable ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("tipoVariable ::= BOOLEAN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoVariable ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("tipoVariable ::= INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoVariable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tipoVariable ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // idsVariables ::= IDENTIFICADOR COMA idsVariables 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("idsVariables ::= IDENTIFICADOR COMA idsVariables - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsVariables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // idsVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("idsVariables ::= IDENTIFICADOR - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idsVariables",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 System.out.println("declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionVariables ::= declaracionVariable declaracionVariables 
            {
              Object RESULT =null;
		 System.out.println("declaracionVariables ::= declaracionVariable declaracionVariables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;
		 System.out.println("declaracionVariables ::= declaracionVariable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionDeclaracionVariables ::= VAR declaracionVariables 
            {
              Object RESULT =null;
		 System.out.println("seccionDeclaracionVariables ::= VAR declaracionVariables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionDeclaracionVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valorTipo ::= SET OF NUMERO RANGO NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("valorTipo ::= SET OF NUMERO RANGO NUMERO - " + n1.getLexema() + " - " + n2.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionTipos ::= declaracionTipo declaracionTipos 
            {
              Object RESULT =null;
		 System.out.println("declaracionTipos ::= declaracionTipo declaracionTipos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionTipos ::= declaracionTipo 
            {
              Object RESULT =null;
		 System.out.println("declaracionTipos ::= declaracionTipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seccionDeclaracionTipos ::= TYPE declaracionTipos 
            {
              Object RESULT =null;
		 System.out.println("seccionDeclaracionTipos ::= TYPE declaracionTipos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionDeclaracionTipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valorConstante ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("valorConstante ::= FALSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valorConstante ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("valorConstante ::= TRUE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorConstante ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("valorConstante ::= NUMERO - " + n.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA - " + i.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionConstantes ::= declaracionConstante declaracionConstantes 
            {
              Object RESULT =null;
		 System.out.println("declaracionConstantes ::= declaracionConstante declaracionConstantes"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionConstantes ::= declaracionConstante 
            {
              Object RESULT =null;
		 System.out.println("declaracionConstantes ::= declaracionConstante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionDeclaracionConstantes ::= CONST declaracionConstantes 
            {
              Object RESULT =null;
		 System.out.println("seccionDeclaracionConstantes ::= CONST declaracionConstantes"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionDeclaracionConstantes",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabeceraPrograma_3 ::= nada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabeceraPrograma_3 ::= declaracionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cabeceraPrograma_2 ::= cabeceraPrograma_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabeceraPrograma_2 ::= seccionDeclaracionVariables cabeceraPrograma_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cabeceraPrograma_1 ::= cabeceraPrograma_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma_1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cabeceraPrograma ::= cabeceraPrograma_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabeceraPrograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= PROGRAM IDENTIFICADOR PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= programa 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nada",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

