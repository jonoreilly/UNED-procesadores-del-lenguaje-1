package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	private String getTypeName(Class clase) {
		if (clase.isArray()) {
			return getTypeName(clase.getComponentType()) + "[]";
		}
		return clase.getName();
	}
	
	private String getFieldNames(Class clase) {
		if (clase.isArray()) {
			return "[" + getFieldNames(clase.getComponentType()) + "]";
		}
		return Arrays.stream(clase.getDeclaredFields()).map(f -> f.getName()).toList().toString();
	}
	
	public void syntax_error(Symbol symbol)
	{ 	    	
		System.out.println("Empty array: " + getFieldNames((new Integer[]{11,12,13,14}).getClass()) + " - " + getTypeName((new Integer[]{21,22,23,24}).getClass()));
	
	    Arrays.stream(this.action_obj.getClass().getDeclaredFields()).forEach(field -> {
	    	try {
	    		System.out.println(field.getName() + ": " + field.get(this.action_obj) + " - " + getTypeName(field.get(this.action_obj).getClass()));
    		} catch(Exception ex) {
    			System.out.println(field.getName() + ": Error - " + ex);
    		}
	    });
	    
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales (Ejemplo)

terminal Token MAS;
terminal Token MENOS;
terminal Token POR;
terminal Token ENTRE;
terminal Token PUNTO;
terminal Token COMA;
terminal Token PUNTO_Y_COMA;
terminal Token DOS_PUNTOS;
terminal Token IGUAL;
terminal Token ASIGNACION;
terminal Token RANGO;
terminal Token MAYOR;
terminal Token DISTINTO;
terminal Token ABRE_PARENTESIS;
terminal Token CIERRA_PARENTESIS;
terminal Token ABRE_VECTOR;
terminal Token CIERRA_VECTOR;
terminal Token BEGIN;
terminal Token END;
terminal Token FUNCTION;
terminal Token PROCEDURE;
terminal Token PROGRAM;
terminal Token IF;
terminal Token THEN;
terminal Token ELSE;
terminal Token REPEAT;
terminal Token UNTIL;
terminal Token TYPE;
terminal Token SET;
terminal Token CONST;
terminal Token VAR;
terminal Token BOOLEAN;
terminal Token INTEGER;
terminal Token TRUE;
terminal Token FALSE;
terminal Token IN;
terminal Token OF;
terminal Token OR;
terminal Token WRITE;
terminal Token NUMERO;
terminal Token CADENA;
terminal Token IDENTIFICADOR;


// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal 			nada;
non terminal 			programa;
non terminal 			cabeceraPrograma;
non terminal 			cabeceraPrograma_1;
non terminal 			cabeceraPrograma_2;
non terminal 			cabeceraPrograma_3;
non terminal 			seccionDeclaracionConstantes;
non terminal 			declaracionConstantes;
non terminal 			declaracionConstante;
non terminal 			valorConstante;
non terminal 			seccionDeclaracionTipos;
non terminal 			declaracionTipos;
non terminal 			declaracionTipo;
non terminal 			valorTipo;
non terminal 			seccionDeclaracionVariables;
non terminal 			declaracionVariables;
non terminal 			declaracionVariable;
non terminal 			idsVariables;
non terminal 			tipoVariable;
non terminal 			declaracionSubprogramas;
non terminal 			declaracionSubprograma;
non terminal 			declaracionProcedimiento;
non terminal 			declaracionFuncion;
non terminal 			tipoFuncion;
non terminal 			parametros;
non terminal 			parametrosConTipo;
non terminal 			idsParametros;
non terminal 			tipoParametro;
non terminal 			cuerpoPrograma;
non terminal 			sentencias;
non terminal 			sentencia;
non terminal 			parametroWrite;
non terminal 			sentenciaIf;
non terminal 			referencia;
non terminal 			expresion;
non terminal 			sentenciaOBloque;
non terminal 			vector;
non terminal 			llamadaFuncion;
non terminal 			parametrosLlamadaFuncion;


// Declaracion de relaciones de precedencia

precedence nonassoc	MAYOR, DISTINTO;
precedence left     MAS, MENOS;
precedence left     POR, ENTRE;
precedence nonassoc	IN;
precedence left		OR;
precedence left		ABRE_VECTOR, CIERRA_VECTOR;
precedence left		ABRE_PARENTESIS, CIERRA_PARENTESIS;
precedence nonassoc ELSE;

// Declaraciï¿½n de reglas de produccion


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


nada ::= ;

axiom ::= programa;

programa ::= PROGRAM IDENTIFICADOR PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO;

// Si usamos multiples producciones seguidas posiblemente vacias (x | nada) el compilador se queja. Mejor usar construcciones acomulativas (x | x y)
// cabeceraPrograma ::= seccionDeclaracionConstantes seccionDeclaracionTipos seccionDeclaracionVariables declaracionSubprogramas;

cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1
					| cabeceraPrograma_1;

cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2
					| cabeceraPrograma_2;

cabeceraPrograma_2 ::= seccionDeclaracionVariables cabeceraPrograma_3
					| cabeceraPrograma_3;
						
cabeceraPrograma_3 ::= declaracionSubprogramas
					| nada;

// Constantes 

seccionDeclaracionConstantes ::= CONST declaracionConstantes;

declaracionConstantes ::= declaracionConstante 
						| declaracionConstante declaracionConstantes;

declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA; 

valorConstante ::= NUMERO | TRUE | FALSE;

// Tipos

seccionDeclaracionTipos ::= TYPE declaracionTipos;

declaracionTipos ::= declaracionTipo 
					| declaracionTipo declaracionTipos;

declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA; 

valorTipo ::= SET OF NUMERO RANGO NUMERO;

// Variables

seccionDeclaracionVariables ::= VAR declaracionVariables;

declaracionVariables ::= declaracionVariable 
						| declaracionVariable declaracionVariables;

declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA; 

idsVariables ::= IDENTIFICADOR
				| IDENTIFICADOR COMA idsVariables;
				
tipoVariable ::= IDENTIFICADOR
				| INTEGER
				| BOOLEAN;

// Subprogramas

declaracionSubprogramas ::= declaracionSubprograma
							| declaracionSubprograma declaracionSubprogramas;

declaracionSubprograma ::= declaracionProcedimiento
						| declaracionFuncion;

declaracionProcedimiento ::= PROCEDURE IDENTIFICADOR ABRE_PARENTESIS parametros CIERRA_PARENTESIS PUNTO_Y_COMA
							 cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA;

declaracionFuncion ::= FUNCTION IDENTIFICADOR ABRE_PARENTESIS parametros CIERRA_PARENTESIS DOS_PUNTOS tipoFuncion PUNTO_Y_COMA
					   cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA;

tipoFuncion ::= INTEGER
				| BOOLEAN;
				
parametros ::= parametrosConTipo
				| parametrosConTipo PUNTO_Y_COMA parametros;
				
parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro;

idsParametros ::= IDENTIFICADOR
				| IDENTIFICADOR COMA idsVariables;
				
tipoParametro ::= IDENTIFICADOR
				| INTEGER
				| BOOLEAN;

// Cuerpo

cuerpoPrograma ::= sentencias;

sentencias ::= nada
			| sentencia sentencias;
			
sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA
			| referencia ASIGNACION expresion PUNTO_Y_COMA
			| REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA
			| sentenciaIf;	

parametroWrite ::= CADENA | expresion;

sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque  {: System.out.println("IF con ELSE"); :}
			| IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque {: System.out.println("IF sin ELSE"); :};

referencia ::= IDENTIFICADOR ABRE_VECTOR expresion CIERRA_VECTOR
			| IDENTIFICADOR;
					
expresion ::= referencia
			| NUMERO
			| TRUE
			| FALSE
			| ABRE_PARENTESIS expresion CIERRA_PARENTESIS
			| expresion MAS expresion
			| expresion MENOS expresion
			| expresion POR expresion
			| expresion ENTRE expresion
			| expresion MAYOR expresion
			| expresion DISTINTO expresion
			| expresion IN expresion
			| expresion OR expresion
			| vector
			| llamadaFuncion;

sentenciaOBloque ::= sentencia
					| BEGIN sentencias END PUNTO_Y_COMA;
					
vector ::= ABRE_VECTOR CIERRA_VECTOR
		| ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR;
					
llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS CIERRA_PARENTESIS
				| IDENTIFICADOR ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS;
					
parametrosLlamadaFuncion ::= expresion 
							| expresion COMA parametrosLlamadaFuncion;



					
					
					
					
					
					
					
					
					
					

