package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales (Ejemplo)

terminal Token PLUS;
terminal Token MINUS;
terminal Token MAS;
terminal Token MENOS;
terminal Token POR;
terminal Token ENTRE;
terminal Token PUNTO;
terminal Token COMA;
terminal Token PUNTO_Y_COMA;
terminal Token DOS_PUNTOS;
terminal Token IGUAL;
terminal Token ASIGNACION;
terminal Token RANGO;
terminal Token MAYOR;
terminal Token DISTINTO;
terminal Token ABRE_PARENTESIS;
terminal Token CIERRA_PARENTESIS;
terminal Token ABRE_VECTOR;
terminal Token CIERRA_VECTOR;
terminal Token ABRE_CORCHETE;
terminal Token CIERRA_CORCHETE;
terminal Token BEGIN;
terminal Token END;
terminal Token FUNCTION;
terminal Token PROCEDURE;
terminal Token PROGRAM;
terminal Token IF;
terminal Token THEN;
terminal Token ELSE;
terminal Token REPEAT;
terminal Token UNTIL;
terminal Token TYPE;
terminal Token SET;
terminal Token CONST;
terminal Token VAR;
terminal Token BOOLEAN;
terminal Token INTEGER;
terminal Token TRUE;
terminal Token FALSE;
terminal Token IN;
terminal Token OF;
terminal Token OR;
terminal Token WRITE;
terminal Token NUMERO;
terminal Token CADENA;
terminal Token IDENTIFICADOR;


// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal 			nada;
non terminal 			programa;
non terminal 			cabeceraPrograma;
non terminal 			cabeceraPrograma_1;
non terminal 			cabeceraPrograma_2;
non terminal 			seccionDeclaracionConstantes;
non terminal 			declaracionConstantes;
non terminal 			declaracionConstante;
non terminal 			valorConstante;
non terminal 			seccionDeclaracionTipos;
non terminal 			declaracionTipos;
non terminal 			declaracionTipo;
non terminal 			valorTipo;
non terminal 			seccionDeclaracionVariables;
non terminal 			declaracionVariables;
non terminal 			declaracionVariable;
non terminal 			idsVariables;
non terminal 			declaracionSubprogramas;
non terminal 			cuerpoPrograma;


// Declaracion de relaciones de precedencia
precedence left     PLUS,
                    MINUS;
// ...

// Declaraciï¿½n de reglas de produccion


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


nada ::= ;

axiom ::= programa;

programa ::= PROGRAM IDENTIFICADOR PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO;

// Si usamos producciones posiblemente vacias (x | nada) el compilador se queja. Mejor usar construcciones acomulativas (x | x y)
// cabeceraPrograma ::= seccionDeclaracionConstantes seccionDeclaracionTipos seccionDeclaracionVariables declaracionSubprogramas;

cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1
					| cabeceraPrograma_1;

cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2
						| cabeceraPrograma_2;

cabeceraPrograma_2 ::= seccionDeclaracionVariables declaracionSubprogramas
						| declaracionSubprogramas;

// Constantes 

seccionDeclaracionConstantes ::= CONST declaracionConstantes;

declaracionConstantes ::= declaracionConstante 
						| declaracionConstante declaracionConstantes;

declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA; 

valorConstante ::= NUMERO | TRUE | FALSE;

// Tipos

seccionDeclaracionTipos ::= TYPE declaracionTipos;

declaracionTipos ::= declaracionTipo 
					| declaracionTipo declaracionTipos;

declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA; 

valorTipo ::= SET OF NUMERO RANGO NUMERO;

// Variables

seccionDeclaracionVariables ::= TYPE declaracionVariables;

declaracionVariables ::= declaracionVariable 
						| declaracionVariable declaracionVariables;

declaracionVariable ::= idsVariables DOS_PUNTOS IDENTIFICADOR PUNTO_Y_COMA; 

idsVariables ::= IDENTIFICADOR
				| IDENTIFICADOR COMA idsVariables;


// TODO: Subprogramas

declaracionSubprogramas ::= nada;

// TODO: Cuerpo

cuerpoPrograma ::= nada;
					
					
					
					
					
					
					
					
					
					
					

