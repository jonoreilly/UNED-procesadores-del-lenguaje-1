package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 	    		    
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales (Ejemplo)

terminal Token MAS;
terminal Token MENOS;
terminal Token POR;
terminal Token PUNTO;
terminal Token COMA;
terminal Token PUNTO_Y_COMA;
terminal Token DOS_PUNTOS;
terminal Token IGUAL;
terminal Token ASIGNACION;
terminal Token RANGO;
terminal Token MAYOR;
terminal Token DISTINTO;
terminal Token ABRE_PARENTESIS;
terminal Token CIERRA_PARENTESIS;
terminal Token ABRE_VECTOR;
terminal Token CIERRA_VECTOR;
terminal Token BEGIN;
terminal Token END;
terminal Token FUNCTION;
terminal Token PROCEDURE;
terminal Token PROGRAM;
terminal Token IF;
terminal Token THEN;
terminal Token ELSE;
terminal Token REPEAT;
terminal Token UNTIL;
terminal Token TYPE;
terminal Token SET;
terminal Token CONST;
terminal Token VAR;
terminal Token BOOLEAN;
terminal Token INTEGER;
terminal Token TRUE;
terminal Token FALSE;
terminal Token IN;
terminal Token OF;
terminal Token OR;
terminal Token WRITE;
terminal Token NUMERO;
terminal Token CADENA;
terminal Token IDENTIFICADOR;


// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;
non terminal 			nada;
non terminal 			programa;
non terminal 			cabeceraPrograma;
non terminal 			cabeceraPrograma_1;
non terminal 			cabeceraPrograma_2;
non terminal 			cabeceraPrograma_3;
non terminal 			seccionDeclaracionConstantes;
non terminal 			declaracionConstantes;
non terminal 			declaracionConstante;
non terminal 			valorConstante;
non terminal 			seccionDeclaracionTipos;
non terminal 			declaracionTipos;
non terminal 			declaracionTipo;
non terminal 			valorTipo;
non terminal 			seccionDeclaracionVariables;
non terminal 			declaracionVariables;
non terminal 			declaracionVariable;
non terminal 			idsVariables;
non terminal 			tipoVariable;
non terminal 			declaracionSubprogramas;
non terminal 			declaracionSubprograma;
non terminal 			declaracionProcedimiento;
non terminal 			declaracionFuncion;
non terminal 			tipoFuncion;
non terminal 			parametros;
non terminal 			parametrosConTipo;
non terminal 			idsParametros;
non terminal 			tipoParametro;
non terminal 			cuerpoPrograma;
non terminal 			sentencias;
non terminal 			sentencia;
non terminal 			parametroWrite;
non terminal 			sentenciaIf;
non terminal 			referencia;
non terminal 			expresion;
non terminal 			sentenciaOBloque;
non terminal 			vector;
non terminal 			llamadaFuncion;
non terminal 			parametrosLlamadaFuncion;


// Declaracion de relaciones de precedencia

precedence nonassoc	MAYOR, DISTINTO;
precedence left     MAS, MENOS;
precedence left     POR;
precedence nonassoc	IN;
precedence left		OR;
precedence left		ABRE_VECTOR, CIERRA_VECTOR;
precedence left		ABRE_PARENTESIS, CIERRA_PARENTESIS;
precedence nonassoc ELSE;

// Declaraciï¿½n de reglas de produccion


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


nada ::= ;

axiom ::= programa;

programa ::= PROGRAM IDENTIFICADOR:i PUNTO_Y_COMA cabeceraPrograma BEGIN cuerpoPrograma END PUNTO 			{: syntaxErrorManager.syntaxDebug("programa ::= ... - " + i.getLexema()); :};

// Si usamos multiples producciones seguidas posiblemente vacias (x | nada) el compilador se queja. Mejor usar construcciones acomulativas (x | x y)
// cabeceraPrograma ::= seccionDeclaracionConstantes seccionDeclaracionTipos seccionDeclaracionVariables declaracionSubprogramas;

cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1								{: syntaxErrorManager.syntaxDebug("cabeceraPrograma ::= seccionDeclaracionConstantes cabeceraPrograma_1"); :}
					| cabeceraPrograma_1															{: syntaxErrorManager.syntaxDebug("cabeceraPrograma ::= cabeceraPrograma_1"); :};

cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2									{: syntaxErrorManager.syntaxDebug("cabeceraPrograma_1 ::= seccionDeclaracionTipos cabeceraPrograma_2"); :}
					| cabeceraPrograma_2															{: syntaxErrorManager.syntaxDebug("cabeceraPrograma_1 ::= cabeceraPrograma_2"); :};

cabeceraPrograma_2 ::= seccionDeclaracionVariables cabeceraPrograma_3								{: syntaxErrorManager.syntaxDebug("cabeceraPrograma_2 ::= seccionDeclaracionVariables cabeceraPrograma_3"); :}
					| cabeceraPrograma_3 															{: syntaxErrorManager.syntaxDebug("cabeceraPrograma_2 ::= cabeceraPrograma_3"); :};
						
cabeceraPrograma_3 ::= declaracionSubprogramas														{: syntaxErrorManager.syntaxDebug("cabeceraPrograma_3 ::= declaracionSubprogramas"); :}
					| nada				 															{: syntaxErrorManager.syntaxDebug("cabeceraPrograma_3 ::= nada"); :};

// Constantes 

seccionDeclaracionConstantes ::= CONST declaracionConstantes										{: syntaxErrorManager.syntaxDebug("seccionDeclaracionConstantes ::= CONST declaracionConstantes"); :};

declaracionConstantes ::= declaracionConstante 														{: syntaxErrorManager.syntaxDebug("declaracionConstantes ::= declaracionConstante"); :}
						| declaracionConstante declaracionConstantes								{: syntaxErrorManager.syntaxDebug("declaracionConstantes ::= declaracionConstante declaracionConstantes"); :};

declaracionConstante ::= IDENTIFICADOR:i IGUAL valorConstante PUNTO_Y_COMA							{: syntaxErrorManager.syntaxDebug("declaracionConstante ::= IDENTIFICADOR IGUAL valorConstante PUNTO_Y_COMA - " + i.getLexema()); :}; 

valorConstante ::= NUMERO:n																			{: syntaxErrorManager.syntaxDebug("valorConstante ::= NUMERO - " + n.getLexema()); :}
				| TRUE 																				{: syntaxErrorManager.syntaxDebug("valorConstante ::= TRUE"); :}
				| FALSE																				{: syntaxErrorManager.syntaxDebug("valorConstante ::= FALSE"); :};

// Tipos

seccionDeclaracionTipos ::= TYPE declaracionTipos													{: syntaxErrorManager.syntaxDebug("seccionDeclaracionTipos ::= TYPE declaracionTipos"); :};

declaracionTipos ::= declaracionTipo 																{: syntaxErrorManager.syntaxDebug("declaracionTipos ::= declaracionTipo"); :}
					| declaracionTipo declaracionTipos												{: syntaxErrorManager.syntaxDebug("declaracionTipos ::= declaracionTipo declaracionTipos"); :};

declaracionTipo ::= IDENTIFICADOR:i IGUAL valorTipo PUNTO_Y_COMA									{: syntaxErrorManager.syntaxDebug("declaracionTipo ::= IDENTIFICADOR IGUAL valorTipo PUNTO_Y_COMA - " + i.getLexema()); :}; 

valorTipo ::= SET OF NUMERO:n1 RANGO NUMERO:n2														{: syntaxErrorManager.syntaxDebug("valorTipo ::= SET OF NUMERO RANGO NUMERO - " + n1.getLexema() + " - " + n2.getLexema()); :};

// Variables

seccionDeclaracionVariables ::= VAR declaracionVariables											{: syntaxErrorManager.syntaxDebug("seccionDeclaracionVariables ::= VAR declaracionVariables"); :};

declaracionVariables ::= declaracionVariable 														{: syntaxErrorManager.syntaxDebug("declaracionVariables ::= declaracionVariable"); :}
						| declaracionVariable declaracionVariables									{: syntaxErrorManager.syntaxDebug("declaracionVariables ::= declaracionVariable declaracionVariables"); :};

declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA							{: syntaxErrorManager.syntaxDebug("declaracionVariable ::= idsVariables DOS_PUNTOS tipoVariable PUNTO_Y_COMA"); :}; 

idsVariables ::= IDENTIFICADOR:i																	{: syntaxErrorManager.syntaxDebug("idsVariables ::= IDENTIFICADOR - " + i.getLexema()); :}
				| IDENTIFICADOR:i COMA idsVariables													{: syntaxErrorManager.syntaxDebug("idsVariables ::= IDENTIFICADOR COMA idsVariables - " + i.getLexema()); :};
				
tipoVariable ::= IDENTIFICADOR:i																	{: syntaxErrorManager.syntaxDebug("tipoVariable ::= IDENTIFICADOR - " + i.getLexema()); :}
				| INTEGER																			{: syntaxErrorManager.syntaxDebug("tipoVariable ::= INTEGER"); :}
				| BOOLEAN																			{: syntaxErrorManager.syntaxDebug("tipoVariable ::= BOOLEAN"); :};

// Subprogramas

declaracionSubprogramas ::= declaracionSubprograma													{: syntaxErrorManager.syntaxDebug("declaracionSubprogramas ::= declaracionSubprograma"); :}
							| declaracionSubprograma declaracionSubprogramas						{: syntaxErrorManager.syntaxDebug("declaracionSubprogramas ::= declaracionSubprograma declaracionSubprogramas"); :};

declaracionSubprograma ::= declaracionProcedimiento													{: syntaxErrorManager.syntaxDebug("declaracionSubprograma ::= declaracionProcedimiento"); :}
						| declaracionFuncion														{: syntaxErrorManager.syntaxDebug("declaracionSubprograma ::= declaracionFuncion"); :};

declaracionProcedimiento ::= PROCEDURE IDENTIFICADOR:i ABRE_PARENTESIS parametros CIERRA_PARENTESIS PUNTO_Y_COMA
							 cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA					{: syntaxErrorManager.syntaxDebug("declaracionProcedimiento ::= ... - " + i.getLexema()); :};

declaracionFuncion ::= FUNCTION IDENTIFICADOR:i ABRE_PARENTESIS parametros CIERRA_PARENTESIS DOS_PUNTOS tipoFuncion PUNTO_Y_COMA
					   cabeceraPrograma BEGIN cuerpoPrograma END PUNTO_Y_COMA						{: syntaxErrorManager.syntaxDebug("declaracionFuncion ::= ... - " + i.getLexema()); :};

tipoFuncion ::= INTEGER																				{: syntaxErrorManager.syntaxDebug("tipoFuncion ::= INTEGER"); :}
				| BOOLEAN																			{: syntaxErrorManager.syntaxDebug("tipoFuncion ::= BOOLEAN"); :};
				
parametros ::= parametrosConTipo																	{: syntaxErrorManager.syntaxDebug("parametros ::= parametrosConTipo"); :}
				| parametrosConTipo PUNTO_Y_COMA parametros											{: syntaxErrorManager.syntaxDebug("parametros ::= parametrosConTipo PUNTO_Y_COMA parametros"); :};
				
parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro 										{: syntaxErrorManager.syntaxDebug("parametrosConTipo ::= idsParametros DOS_PUNTOS tipoParametro"); :};

idsParametros ::= IDENTIFICADOR:i																	{: syntaxErrorManager.syntaxDebug("idsParametros ::= IDENTIFICADOR - " + i.getLexema()); :}
				| IDENTIFICADOR:i COMA idsVariables													{: syntaxErrorManager.syntaxDebug("idsParametros ::= IDENTIFICADOR COMA idsVariables - " + i.getLexema()); :};
				
tipoParametro ::= IDENTIFICADOR:i	 																{: syntaxErrorManager.syntaxDebug("tipoParametro ::= IDENTIFICADOR - " + i.getLexema()); :}
				| INTEGER			 																{: syntaxErrorManager.syntaxDebug("tipoParametro ::= INTEGER"); :}
				| BOOLEAN			 																{: syntaxErrorManager.syntaxDebug("tipoParametro ::= BOOLEAN"); :};

// Cuerpo

cuerpoPrograma ::= sentencias 																		{: syntaxErrorManager.syntaxDebug("cuerpoPrograma ::= sentencias"); :};

sentencias ::= nada																					{: syntaxErrorManager.syntaxDebug("sentencias ::= nada"); :}
			| sentencia sentencias																	{: syntaxErrorManager.syntaxDebug("sentencias ::= sentencia sentencias"); :};
			
sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA					{: syntaxErrorManager.syntaxDebug("sentencia ::= WRITE ABRE_PARENTESIS parametroWrite CIERRA_PARENTESIS PUNTO_Y_COMA"); :}
			| referencia ASIGNACION expresion PUNTO_Y_COMA											{: syntaxErrorManager.syntaxDebug("sentencia ::= referencia ASIGNACION expresion PUNTO_Y_COMA"); :}
			| REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA		{: syntaxErrorManager.syntaxDebug("sentencia ::= REPEAT sentencias UNTIL ABRE_PARENTESIS expresion CIERRA_PARENTESIS PUNTO_Y_COMA"); :}
			| sentenciaIf																			{: syntaxErrorManager.syntaxDebug("sentencia ::= sentenciaIf"); :}
			| llamadaFuncion PUNTO_Y_COMA 															{: syntaxErrorManager.syntaxDebug("sentencia ::= llamadaFuncion PUNTO_Y_COMA"); :};

parametroWrite ::= CADENA:c 																		{: syntaxErrorManager.syntaxDebug("parametroWrite ::= CADENA - " + c.getLexema()); :}
				| expresion																			{: syntaxErrorManager.syntaxDebug("parametroWrite ::= expresion"); :};

sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque 			{: syntaxErrorManager.syntaxDebug("sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque ELSE sentenciaOBloque"); :}
			| IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque									{: syntaxErrorManager.syntaxDebug("sentenciaIf ::= IF ABRE_PARENTESIS expresion CIERRA_PARENTESIS THEN sentenciaOBloque"); :};

referencia ::= IDENTIFICADOR:i ABRE_VECTOR expresion CIERRA_VECTOR									{: syntaxErrorManager.syntaxDebug("referencia ::= IDENTIFICADOR ABRE_VECTOR expresion CIERRA_VECTOR - " + i.getLexema()); :}
			| IDENTIFICADOR:i																		{: syntaxErrorManager.syntaxDebug("referencia ::= IDENTIFICADOR - " + i.getLexema()); :};
					
expresion ::= referencia																			{: syntaxErrorManager.syntaxDebug("expresion ::= referencia"); :}
			| NUMERO:n																				{: syntaxErrorManager.syntaxDebug("expresion ::= NUMERO - " + n.getLexema()); :}
			| TRUE																					{: syntaxErrorManager.syntaxDebug("expresion ::= TRUE"); :}
			| FALSE																					{: syntaxErrorManager.syntaxDebug("expresion ::= FALSE"); :}
			| ABRE_PARENTESIS expresion CIERRA_PARENTESIS 											{: syntaxErrorManager.syntaxDebug("expresion ::= ABRE_PARENTESIS expresion CIERRA_PARENTESIS"); :}
			| expresion MAS expresion																{: syntaxErrorManager.syntaxDebug("expresion ::= expresion MAS expresion"); :}
			| expresion MENOS expresion																{: syntaxErrorManager.syntaxDebug("expresion ::= expresion MENOS expresion"); :}
			| expresion POR expresion																{: syntaxErrorManager.syntaxDebug("expresion ::= expresion POR expresion"); :}
			| expresion MAYOR expresion																{: syntaxErrorManager.syntaxDebug("expresion ::= expresion MAYOR expresion"); :}
			| expresion DISTINTO expresion															{: syntaxErrorManager.syntaxDebug("expresion ::= expresion DISTINTO expresion"); :}
			| expresion IN expresion																{: syntaxErrorManager.syntaxDebug("expresion ::= expresion IN expresion"); :}
			| expresion OR expresion																{: syntaxErrorManager.syntaxDebug("expresion ::= expresion OR expresion"); :}
			| vector																				{: syntaxErrorManager.syntaxDebug("expresion ::= vector"); :}
			| llamadaFuncion																		{: syntaxErrorManager.syntaxDebug("expresion ::= llamadaFuncion"); :};		

sentenciaOBloque ::= sentencia																		{: syntaxErrorManager.syntaxDebug("sentenciaOBloque ::= sentencia"); :}
					| BEGIN sentencias END PUNTO_Y_COMA												{: syntaxErrorManager.syntaxDebug("sentenciaOBloque ::= BEGIN sentencias END PUNTO_Y_COMA"); :};
					
vector ::= ABRE_VECTOR CIERRA_VECTOR																{: syntaxErrorManager.syntaxDebug("vector ::= ABRE_VECTOR CIERRA_VECTOR"); :}
		| ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR										{: syntaxErrorManager.syntaxDebug("vector ::= ABRE_VECTOR expresion RANGO expresion CIERRA_VECTOR"); :};
					
llamadaFuncion ::= IDENTIFICADOR:i ABRE_PARENTESIS CIERRA_PARENTESIS								{: syntaxErrorManager.syntaxDebug("llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS CIERRA_PARENTESIS - " + i.getLexema()); :}
				| IDENTIFICADOR:i ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS		{: syntaxErrorManager.syntaxDebug("llamadaFuncion ::= IDENTIFICADOR ABRE_PARENTESIS parametrosLlamadaFuncion CIERRA_PARENTESIS - " + i.getLexema()); :};
					
parametrosLlamadaFuncion ::= expresion 																{: syntaxErrorManager.syntaxDebug("parametrosLlamadaFuncion ::= expresion"); :}
							| expresion COMA parametrosLlamadaFuncion								{: syntaxErrorManager.syntaxDebug("parametrosLlamadaFuncion ::= expresion COMA parametrosLlamadaFuncion"); :};



					
					
					
					
					
					
					
					
					
					

